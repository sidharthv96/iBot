
Registering a Sensor

Data = {
  "mode": "sensor",
  "version": "1",
  "code": "MAC",
  "type": "ultrasonic",
  "events": {
    "obstacle": "sensor.value<50",
    "free": "sensor.value>=50"
  }
}
HTTP.POST(Data)



# Register new device

@csrf_exempt
def register(request):
    if request.method == "GET":
        return HttpResponse("Register Device")
    # print(request.body)
    d = json.loads(request.body)
    print(d)
    if d['mode'] == "actuator":
        act, created = Actuator.objects.get_or_create(code=d['code'])
        if created:
            act.name = d['type']
        act.last_seen = timezone.now()
        act.save()
        if created or int(d['version']) > act.version:
            actions = d['actions']
            for x in actions:
                p, c = Parameter.objects.get_or_create(
                    name=d['type'] + "_" + x, value=actions[x])
                act.actions.add(p)
            act.save()
            print("Actuator Updated")    
    return HttpResponse("Working")




#Monitor and send data from sensor - Ultrasonic

void loop()
{
  duration = Read_Ultrasonic();
  distance= duration*0.017;  
  http.begin(host + "/signal/?code=" + code + "&value=" + String(distance));
  int httpCode = http.GET();  
  http.end();
  delay(200);
}




def signal(request):
    sensor = Sensor.objects.get(code=request.GET.get("code"))
    sensor.data = request.GET.get("data")
    sensor.value = float(request.GET.get("value") or 0)
    sensor.last_seen = timezone.now()
    sensor.state = True
    sensor.save()
    events = Event.objects.filter(sensor=sensor)
    for event in events:
        print(event.parameter)
        print(sensor.data, sensor.value)
        print(eval(event.parameter))
        if eval(event.parameter):
            rule = Rule.objects.filter(event=event).order_by("-pk").first()
            action = rule.action
            actuator = action.actuator
            parameter = action.parameter
            print(actuator.name, actuator.code)
            print(parameter)
            exec(parameter)
            actuator.save()

    return HttpResponse("OK")




# Getting command from server and executing it

void loop()
{
    HTTPClient http;
    http.begin(host + "/refresh/?code=" + code);
    int httpCode = http.GET();
    if (httpCode > 0)
    {
        if (httpCode == HTTP_CODE_OK)
        {
            String payload = http.getString();
            Serial.println("." + payload + ".");
            if (payload == "1")
            {
                digitalWrite(LED_PIN, LOW);
            }
            else if (payload == "0")
            {
                digitalWrite(LED_PIN, HIGH);
            }
            blinkState = (payload == "blink");
        }
    }
    else
    {
        Serial.println(httpCode);
    }
    http.end();
    if (blinkState)
    {
        ledState = !ledState;
        digitalWrite(LED_PIN, ledState);
    }
    delay(400);
}



def refresh(request):
    global last_check
    dev = Device.objects.get(code=request.GET.get("code"))
    dev.last_seen = timezone.now()
    dev.save()

    if timezone.now() > last_check + timedelta(seconds=3):
        print("Ch3ck3d")
        devs = Device.objects.filter(last_seen__lt=timezone.now()-timedelta(seconds=3))
        for d in devs:
            d.state = False
            d.save()
        last_check = timezone.now()

    return HttpResponse(dev.data or "OK")
 


# Add a new Rule

def add_rule(request):
    if request.method == "GET":
        ret = {'sensors': Sensor.objects.all(
        ), 'actuators': Actuator.objects.all()}
        return render(request, "add_rule.html", ret)
    print(request.POST)
    print(request.body)
    req = request.POST
    sensor = Sensor.objects.get(pk=req.get("sensor"))
    actuator = Actuator.objects.get(pk=req.get("actuator"))
    sensor_event = Parameter.objects.get(pk=req.get("sensor_event"))
    actuator_action = Parameter.objects.get(pk=req.get("actuator_action"))
    sensor_p = sensor_event.value
    if sensor_event.variable:
        sensor_p = req.get("sensor_value")
    event = Event.objects.get_or_create(sensor=sensor, parameter=sensor_p)[0]
    actuator_p = actuator_action.value
    if actuator_action.variable:
        actuator_p = req.get("actuator_value")
    action = Action.objects.get_or_create(
        actuator=actuator, parameter=actuator_p)[0]
    rule = Rule.objects.get_or_create(event=event, action=action)[0]
    rule.name = req.get("name")
    rule.save()
    return redirect("/rule/add/")

# Frontend

# Sensor Component

export class Ultrasonic extends Component{

    constructor(props) {
        super(props);
        this.toggle = this.toggle.bind(this);
        this.state = { collapse: false };
    }

    toggle() {
        this.setState({ collapse: !this.state.collapse });
    }
    
    render(){
        let d = this.props.device;
        let color="success";
        if(d.value<50)
            color = "danger";
        else if(d.value<150)
            color = "warning";
        else if(d.value<300)
            color = "primary";
        // if(d.last_seen)
        return(
            <Card>
                <CardImg top className={d.state?"":"dead"} width="100%" src={ultra_img}/>
                <CardBody>
                    <CardTitle>Ultrasonic Sensor</CardTitle>
                    <CardText>Measures distance to objects using ultrasonic sound waves</CardText>
                    <CardText>Distance : {d.value}CM</CardText>
                    <Progress animated={d.state} color={color} value={d.value / 4}/>
                </CardBody>
            </Card>
        )
    }
}